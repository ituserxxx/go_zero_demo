// Code generated by goctl. DO NOT EDIT.
// Source: hello.proto

package helloclient

import (
	"context"

	"go_zero_demo/rpc/hello/hello"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request      = hello.Request
	Response     = hello.Response
	UserListItem = hello.UserListItem
	UserListReq  = hello.UserListReq
	UserListResp = hello.UserListResp

	Hello interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	}

	defaultHello struct {
		cli zrpc.Client
	}
)

func NewHello(cli zrpc.Client) Hello {
	return &defaultHello{
		cli: cli,
	}
}

func (m *defaultHello) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := hello.NewHelloClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultHello) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := hello.NewHelloClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}
